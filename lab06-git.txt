Git Intro 2 Activity
==================

A. Form teams
-------------

Form a 2-person team. Try to find someone who uses the same platform as you (e.g., Windows, Linux, etc.). If you can't, that's fine. If you are the odd-person-out, join a team of 2 with permission of your TA.

Make a repo on GitHub.

Complete the exercises below, and fill in your answers in the spaces provided below each question.
Once you have completed all the exercises and filled in this file with your answers, 
add this file to your working directory (which you will create in section G) and push it to your team repo.
This file is the deliverable for this lab, so make sure you do not forget to push it at the end!

1.  List your team members below.

	Mark Seda
	
	Pasquale Zingo


D. Getting help
---------------

Run the following commands.

    git help
    git help -ag
    git help init

1.  What does `git help` do?

    Lists common commands in git and what they do. 

2.  What does `-ag` cause `git help` to do?

    Lists every single argument that git has access to. 

G. Basic commands
-----------------

Open the terminal. Navigate to your team’s repository directory.

Create a directory inside of your team repository which will act as your submission directory for this lab.
The directory should be named according to the last names of your team members following the format below.

    <member1LastName>_<member2LastName>_Lab6

Use a plain text editor to create `names.txt` inside the directory you just created.
Put the names of your team in the file. Save and exit.

Run `git status` before and after each of these commands.

    git add names.txt
    git commit –m “Add our names.”
    git log

1.  What kind of information does `git status` report?

    It tells you which files are present but not staged, as well as any changes that have been made to staged files.
	After commiting, it tells you that you are ahead of master, and that there are no unstaged changes.
	Git status does not report anything different after git log - git log shows each of the committs in the past.

2.  What does `git add names.txt` do?

    It makes the names.txt file become a tracked file - git wil know when changes are made to it and will
	include these changes in any future commits. 

3.  What does `git commit -m "Add our names."` do?

    Git commit creates a "snapshot" of the current state of the local repository and saves these changes to
	be placed on the remote repository when git push is used later.

Use a plain text editor to create the following files:

-   `birthdays.txt` - Put your birthdays in this file. (you are not obligated to use real information here)

-   `movies.txt` - Put the last movie each of you watched in alphabetical order.

Run `git status` before and after each of these commands.

    git add .
    git commit		Note:  Commit will open the vim editor; write a multi-line commit
						   message, save and quit (press esc and then type :wq).
    git log

4.  What does `git add .` do? What do you think `.` means?

    It tracks the files in the current working directory. "." means current working directory in Unix.

5.  What does `git commit` (without -m) do?

    It begins the commit, but needs a message to proceed, so git opens vim so a message can be added.

6.  If you want to write a more detailed commit message (which is
    good practice) what command would you use?

    You would use commit without the -m so you can format a longer message properly in the text editor.

7.  What does `git log do`?

    Git log shows all of the previous committs and details about each (including the current HEAD)


H. Stage/Cache/Index
--------------------

Do the following:

-   Modify `names.txt` so that names are listed in *Last, First* format,
    one per line.

-   Modify `movies.txt` so they are in reverse alphabetical order
    by title.

-   Create a new file `foods.txt` that contains your favorite foods (one
    for each team member).

Run the following commands:

    git add names.txt
    git status

1.  Below write each file name under the state that its changes are
    currently in. Compose a definition for each state.

    **Staged**

    names.txt

    **Unstaged**

    movies.txt

    **Untracked**

    foods.txt

1.  If you run `git commit` what changes will be committed (***DON’T DO IT***)?

    Only names.txt

2.  What command do you run to stage changes?

    git add

3.  What command do you run to unstage changes?

    git reset

Run the following commands:

    git diff
    git diff --cached

1.  What does `git diff` display?

    Git diff shows the unstaged changes. Does not show untracked files' changes.

2.  What does `git diff --cached` display?
	
	Shows the staged changes. Does not show untracked files' changes.


3.  Formulate a sequence of commands to unstage changes to `names.txt`,
    and stage the changes to `movies.txt`. Write them here. Execute your commands and
    confirm they worked.

    git reset names.txt
	git add movies.txt
	
	They worked.

4.  Edit `movies.txt`, change any one of the movies, and save it. Then
    run `git status`. What do you observe? Explain what you think is
    going on.

    There are staged movie changes and unstaged movie changes. The stages changes are the ones
	made earlier, and the unstaged changes are the ones that were just made now.

5.  Delete `names.txt`. Then run `git status`. What do you observe?
    Explain what you think is going on.

    Same as before - the staged changes from before still show up, and the deletion is unstaged. 

6.  Rename `movies.txt` to `last-movies`. Run `git status`. Observe
    and explain.
	Git status says that movies.txt has been deleted and there is an untracked file called
	last-movies.txt. Because git tracks files based on their name, it is not aware of the 
	continuity between movies.txt and last-movies.txt. Git only knows a file was deleted and 
	added.
    

7.  Formulate a sequence of commands to stage all changes including the
    untracked file and commit (with any reasonable message you like).
    Execute them.

	git add *
	git commit -m "Using git add * will stage all files!"
	
	Note: git add * stages all changes in your directory, git add -A does all in all directories!
	

8.  In git vernacular, `index`, `cache`, and `stage` all refer to the
    same thing. What does it hold?

    These terms refer to changes to files that are tracked and ready to be commited. 

9.  Why have a `stage`? Why not just commit all changes since the last
    commit?

    Sometimes you may only want to add some of your changes to the remote repository.
	Say you had a code review, 1 file was good to go, but another needed work, you
	could just stage and commit the file that is ready while you work on the other. 

I. Undo
-------

Run the following commands:

    git log
    git status
    git reset --soft "HEAD^"
    git log
    git status

1.  What does `git reset --soft ``"HEAD^" `do?

    Goes "back in time" to the status of the repository just prior to the last commit.

Run the following commands:

    git commit –m "Redo."
    git log
    git status
    git reset --hard "HEAD^"
    git log
    git status

1.  What does `git reset --hard ``"HEAD^"`` `do?

    It goes back to the the state of the previous commit before any changes were added or staged.

2.  What is the difference between `--hard` and `--soft`?

    --Hard goes to the state of the last commit when it was freshly commited. --Soft goes back
	to the last commit, late, right before the next commit. 

3.  What do you think `HEAD` means?

    Referencing the current commit you are in.

4.  What do you think `HEAD^` means?

    Referencing the previous commit from the one you are in. 
	
5.  On Canvas, put two things: 1) a link to your repo (as a comment on the assignment), and 2) submit this document.

6. Push this document, completed, to your repo.

J. Helpful resources
--------------------

-   <https://git-scm.com/doc>

-   <https://www.atlassian.com/git/tutorials/>

-   github-git-cheat-sheet.pdf on class website

K. Copyright and Licensing
--------------------------

Adapted from:

Copyright 2016, Darci Burdge and Stoney Jackson SOME RIGHTS RESERVED

This work is licensed under the Creative Commons Attribution-ShareAlike
4.0 International License. To view a copy of this license, visit
<http://creativecommons.org/licenses/by-sa/4.0/> .
